1
-- comment
--
SELECT * from loc ORDER BY id DESC LIMIT 1000

#--------------------------------------------------------------------------
2
INSERT INTO loc (
    api_key,measured_at,version,record_type,session_num,mobile_id,user_id,
    caller_ip,lat,lon,accuracy,speed,bearing,alt,medication,weather_time,
    temperature_min,temperature_max,humidity,no2,pressure,wind,
    clouds_sky,notes,attr,the_geom,battery_level
)
VALUES (
    $api_key, to_timestamp($measured_at) at time zone 'utc',$version,$record_type,
    $session_num,$mobile_id,$user_id,$caller_ip,$lat,$lon, $accuracy, $speed,$bearing,$alt,
    $medication, to_timestamp($weather_time) at time zone 'utc',$temperature_min,
    $temperature_max,$humidity,$no2,$pressure,$wind,
    $clouds_sky,$notes,$attr,
    ST_GeomFromText('POINT(' || $lon || ' ' || $lat || ')',4326),$battery_level
)
#--------------------------------------------------------------------------
3
SELECT
    id,measured_at,mobile_id, session_num, record_type,
    ST_X(the_geom) as lon, ST_Y(the_geom) as lat,
    speed,bearing,alt,medication,weather_time,
    temperature_min,temperature_max,humidity

from loc
ORDER BY id DESC LIMIT 1000

#--------------------------------------------------------------------------
4
-- bounds format is as follows:
-- lower left corner(lon, lat), top right corner  (lon, lat)
--
-- -91.97908270415822,44.859764956810096,-91.87720167693864,44.88865662175359
--
SELECT 	ST_X(the_geom) as lon, ST_Y(the_geom) as lat
FROM 	loc
WHERE	the_geom && ST_MakeEnvelope("+ $bounds +")
LIMIT 	1000
#--------------------------------------------------------------------------
5

UPDATE loc SET
    weather_time 	= $weather_time,
    temperature_min	= $temperature_min,
    temperature_max	= $temperature_max,
    humidity		= $humidity,
    pressure		= $pressure,
    wind            = $wind
WHERE
    id = $pid
#--------------------------------------------------------------------------
6
SELECT
    id,stored_at, measured_at AT TIME ZONE 'GMT' as mst, measured_at,mobile_id,
    record_type, session_num,
    ST_X(the_geom) as lon, ST_Y(the_geom) as lat, accuracy, is_valid,
    speed,bearing,alt,medication,weather_time,
    temperature_min,temperature_max,humidity
from loc
WHERE
    is_valid	=  1               and
    stored_at 	>=  $stored_at      and
    measured_at >=  $measured_at    and
    mobile_id  	=   $mobile_id      and
    session_num = 	$session_num    and
    id          >=  $id             and
    accuracy    >=  $accuracy
ORDER BY id DESC LIMIT 1000

#--------------------------------------------------------------------------
6a
-- same as 6 except it, gives all tracks for a date
SELECT
    id,stored_at, measured_at AT TIME ZONE 'GMT' as mst, measured_at,mobile_id,
    record_type, session_num,
    ST_X(the_geom) as lon, ST_Y(the_geom) as lat, accuracy, is_valid,
    speed,bearing,alt,medication,weather_time,
    temperature_min,temperature_max,humidity
from loc
WHERE
    is_valid	<=  1               and
    stored_at 	>=  $stored_at      and
    measured_at::DATE =  $measured_at::DATE    and
    mobile_id  	=   $mobile_id      and
    session_num = 	$session_num    and
    id          >=  $id             and
    accuracy    >=  $accuracy
ORDER BY id DESC LIMIT 1000

#--------------------------------------------------------------------------
6b
-- same as 6a except it includes invalid points
SELECT
    id,stored_at, measured_at AT TIME ZONE 'GMT' as mst, measured_at,mobile_id,
    record_type, session_num,
    ST_X(the_geom) as lon, ST_Y(the_geom) as lat, accuracy, is_valid,
    speed,bearing,alt,medication,weather_time,
    temperature_min,temperature_max,humidity
from loc
WHERE
    stored_at 	>=  $stored_at      and
    measured_at::DATE =  $measured_at::DATE    and
    mobile_id  	=   $mobile_id      and
    session_num = 	$session_num    and
    id          >=  $id             and
    accuracy    >=  $accuracy
ORDER BY id DESC LIMIT 1000
#--------------------------------------------------------------------------
6c
-- same as 6 except it includes invalid points
SELECT
    id,stored_at, measured_at AT TIME ZONE 'GMT' as mst, measured_at,mobile_id,
    record_type, session_num,
    ST_X(the_geom) as lon, ST_Y(the_geom) as lat, accuracy, is_valid,
    speed,bearing,alt,medication,weather_time,
    temperature_min,temperature_max,humidity
from loc
WHERE
    stored_at 	>=  $stored_at      and
    measured_at >=  $measured_at    and
    mobile_id  	=   $mobile_id      and
    session_num = 	$session_num    and
    id          >=  $id             and
    accuracy    >=  $accuracy
ORDER BY id DESC LIMIT 1000
#--------------------------------------------------------------------------
7
select  distinct mobile_id, user_id,session_num    from loc;
#--------------------------------------------------------------------------
8
update loc set is_valid = 2 where id=$pid
#--------------------------------------------------------------------------
9
-- Get top 5 unique mobile_id and sessions

SElECT
        distinct a.mobile_id, CAST(coalesce(a.session_num, '0') AS integer) as session_num
FROM
        loc a
WHERE
    CAST(coalesce(a.session_num, '0') AS integer)
    IN (
          SELECT    distinct CAST(coalesce(b.session_num, '0') AS integer) as sn
          FROM      loc b
          WHERE     a.mobile_id=b.mobile_id and
                    b.is_valid = 1
          ORDER BY  sn DESC
          LIMIT 4)
ORDER BY a.mobile_id, session_num DESC;

#--------------------------------------------------------------------------
9a
-- Same as 9 except but more efficient

WITH loc1 as (
    SELECT distinct mobile_id,  CAST(coalesce(a.session_num, '0') AS integer) as groupby
    FROM  loc a
)
SElECT
  distinct a.mobile_id, a.groupby
FROM
  loc1 a
WHERE
  a.groupby
  IN (
    SELECT    distinct CAST(coalesce(b.session_num, '0') AS integer)  as sn
    FROM      loc b
    WHERE     a.mobile_id=b.mobile_id and
              b.is_valid = 1
    ORDER BY  sn DESC
    LIMIT 4)
ORDER BY a.mobile_id, groupby DESC;

#--------------------------------------------------------------------------
10

SELECT * from loc where weather_time IS null ORDER BY id DESC LIMIT 1000
#--------------------------------------------------------------------------
11

SELECT * from weather_stations 
WHERE
	state= $state
ORDER BY state
LIMIT 100

#--------------------------------------------------------------------------
12

select source from pgr
order by st_distance(ST_StartPoint(geom_way), st_setsrid(st_makepoint($lon, $lat), 4326)) limit 1;

#--------------------------------------------------------------------------
13

SELECT seq, id1 AS node, id2 AS edge, di.cost, ST_AsGeoJSON(geom_way)
 FROM pgr_dijkstra(
    'SELECT id, source, target, st_length(geom_way) as cost FROM pgr',
    $s, $t, false, false
  ) as di
  JOIN pgr
  ON di.id2 = pgr.id


#--------------------------------------------------------------------------
14

select * from users where cname=$cname and passwd=$passwd


#--------------------------------------------------------------------------
15
WITH loc1 as (
	SELECT 
		distinct mobile_id,  
		measured_at::DATE as groupby 
	FROM  
		loc 
	WHERE 
		(record_type <> 'active' OR record_type IS NULL)
), 
maxDate AS (
	SELECT 
		mobile_id, 
		MAX(measured_at::DATE) AS recentUpload 
	FROM 
		loc 
	WHERE 
		(record_type <> 'active' OR record_type IS NULL) 
	GROUP BY mobile_id
) 
SELECT 
	distinct a.mobile_id, 
	a.groupby, 
	users.fname, 
	users.lname, 
	users.cname, 
	recentUpload::DATE 
FROM 
	loc1 a 
LEFT OUTER JOIN maxDate m 
ON m.mobile_id = a.mobile_id 
LEFT OUTER JOIN users 
ON users.mobileid = a.mobile_id 
WHERE 
	a.groupby 
	IN (
		SELECT    distinct measured_at::DATE  as sn 
		FROM      loc b 
		WHERE     a.mobile_id=b.mobile_id and 
		b.is_valid = 1 and 
		(b.record_type <> 'active' OR b.record_type IS NULL) 
		ORDER BY  sn DESC 
		LIMIT 4
	) 
ORDER BY  
	recentUpload::DATE DESC, 
	a.mobile_id, groupby DESC
#--------------------------------------------------------------------------
16

UPDATE users   SET
    fname 	= $fname,
    lname	= $lname,
    address	= $address,
    cellphone		= $cellphone,
    mobileid		= $mobileid,
    homephone            = $homephone,
    home_location =$home_location
WHERE
    userid = $userSysId
#--------------------------------------------------------------------------

17
select * from users where cname=$cname

#--------------------------------------------------------------------------

18
select * from users where userid = $userSysId

#--------------------------------------------------------------------------
19

UPDATE users   SET
    password 	= $password
WHERE
    userid = $userSysId and password =$oldpassword

#--------------------------------------------------------------------------
20
UPDATE users   SET
    password 	= $password
 where cname=$cname and passwd=$oldpasswd

#--------------------------------------------------------------------------
21
SELECT seq,id1 AS route, id2 AS node, id3 AS edge, ksp.cost, ST_AsGeoJSON(geom_way)
  FROM pgr_ksp(
    'SELECT id, source, target, st_length(geom_way::geography) as cost ,st_length(geom_way::geography) as reverse_cost FROM pgr',
    $s, $t, $k, true
  ) as ksp
  JOIN pgr
  ON ksp.id3 = pgr.id
#--------------------------------------------------------------------------
21a
SELECT seq,id1 AS route, id2 AS node, id3 AS edge, ksp.cost, ST_AsGeoJSON(geom_way)
  FROM pgr_ksp(
    'SELECT id, source, target, st_length(geom_way) as cost , null FROM pgr',
    $s, $t, $k, false
  ) as ksp
  JOIN pgr
  ON ksp.id3 = pgr.id
#--------------------------------------------------------------------------
22
SELECT distinct mobile_id,measured_at::DATE as groupby
    FROM  loc where mobile_id=$mobile_id LIMIT 20

#--------------------------------------------------------------------------
23
INSERT INTO temproutes (
	seq, route, node, edge, routecost, st_asgeojson, sourcenode, targetnode
)
VALUES(
	$seq, $route, $node, $edge, $rc, $st_asgeojson, $sourcenode, $targetnode
)
#--------------------------------------------------------------------------
24
WITH
lines_in_polygons AS(
	WITH	line AS (
		SELECT ST_Union(ST_GeomFromGeoJson(st_asgeojson)::geography::geometry) as line_geom, route
		FROM temproutes
		WHERE sourcenode = $s AND targetnode = $t AND route < $k
		GROUP BY route
		)
	SELECT ST_Intersection(line_geom, voronoi_geom) as line_and_poly_intersection, station_id, route
	FROM line, weather_stations
	WHERE is_interested = TRUE AND ST_Intersects(line_geom,voronoi_geom)
)

SELECT line_and_poly_intersection, ST_length(line_and_poly_intersection::geography)*.000621371 AS length_in_cell, station_id, route
FROM lines_in_polygons
#--------------------------------------------------------------------------
25
WITH loc1 as (
    SELECT distinct mobile_id,  measured_at::DATE as groupby
    FROM  loc
),
users1 as (
	SELECT viewable_mobileid
	FROM users
	WHERE cname = $username
)
SElECT
  distinct a.mobile_id, a.groupby
FROM
  loc1 a, users1 u
WHERE
  a.groupby
  IN (
    SELECT    distinct measured_at::DATE  as sn
    FROM      loc b
    WHERE     a.mobile_id=b.mobile_id and
              b.is_valid = 1 and
              strpos(u.viewable_mobileid,a.mobile_id) > 0
    ORDER BY  sn DESC
 )
ORDER BY a.mobile_id, groupby DESC;
#--------------------------------------------------------------------------
26
WITH loc1 as (
    SELECT distinct mobile_id,  measured_at::DATE as groupby
    FROM  loc
),
users1 as (
	SELECT viewable_mobileid
	FROM users
	WHERE cname = $username
)
SElECT
  distinct a.mobile_id, a.groupby, v.fname, v.lname, v.cname
FROM
  loc1 a, users1 u, users v
WHERE
  a.groupby
  IN (
    SELECT    distinct measured_at::DATE  as sn
    FROM      loc b
    WHERE     a.mobile_id=b.mobile_id and
              b.is_valid = 1 and
              a.mobile_id = v.mobileid and
              strpos(u.viewable_mobileid,a.mobile_id) > 0
    ORDER BY  sn DESC
 )
ORDER BY a.mobile_id, groupby DESC;
#--------------------------------------------------------------------------
27
INSERT INTO users (fname,lname,cname,address,cellphone,mobileid,homephone,passwd,home_location,viewable_mobileid)
VALUES ($fname,$lname,$username,$address,$cellphone,$mobileid,$homephone,$password,$home_location,$mobileid)
#--------------------------------------------------------------------------
28
WITH heart AS(
SELECT mobile_id, MAX(stored_at) AS recentHeartbeat
FROM loc AS lo
WHERE lo.record_type = 'active'
GROUP BY lo.mobile_id
)
SELECT l.mobile_id, cname,fname,lname,address,cellphone,homephone,home_location, MAX(stored_at) AS newestUpload, count(l.mobile_id) AS numEntries, heart.recentHeartbeat,passwd
FROM loc AS l
LEFT OUTER JOIN users
ON users.mobileid = l.mobile_id
FULL OUTER JOIN heart
ON heart.mobile_id = l.mobile_id
GROUP BY l.mobile_id,cname,fname,lname,address,cellphone,homephone,home_location, heart.recentheartbeat,passwd
#--------------------------------------------------------------------------
29
WITH activedates AS (
	SELECT 
		day_id 
	FROM 
		calendar 
	WHERE 
		day_id <= current_date AND
		day_id >= (SELECT MIN(CAST(stored_at AS DATE)) FROM loc)
) 
SELECT 
	day_id, 
	COUNT(DISTINCT mobile_id) AS activeusers
 FROM 
	loc 
FULL OUTER JOIN activedates 
ON CAST(stored_at AS DATE) = activedates.day_id 
GROUP BY 
	day_id,
	CAST(stored_at AS DATE) 
ORDER BY day_id ASC
#--------------------------------------------------------------------------
30
WITH heart AS(
SELECT COUNT(DISTINCT ID) AS heartbeats, CAST(stored_at AS DATE) AS storedate
FROM loc AS lo
WHERE lo.record_type = 'active' AND lo.mobile_id = $mobile_id
GROUP BY CAST(stored_at AS DATE)
),
attack AS(
SELECT COUNT(DISTINCT ID) AS attacks, CAST(stored_at AS DATE) AS storedate2
FROM loc AS lo2
WHERE (lo2.record_type = 'SEVERE_ATTACK' OR lo2.record_type = 'MEDIUM_ATTACK' OR lo2.record_type = 'MILD_ATTACK') AND lo2.mobile_id = $mobile_id
GROUP BY CAST(stored_at AS DATE)
)
SELECT CAST(stored_at AS DATE), COUNT(DISTINCT id) AS uploads,heartbeats, attacks
FROM loc
FULL OUTER JOIN heart
ON heart.storedate = CAST(stored_at AS DATE)
FULL OUTER JOIN attack
ON attack.storedate2 = CAST(stored_at AS DATE)
WHERE mobile_id = $mobile_id
GROUP BY CAST(stored_at AS DATE),heartbeats,attacks
LIMIT 365
#--------------------------------------------------------------------------
31
SELECT COUNT(cname) AS numUsers
FROM users
WHERE cname = $cname
#--------------------------------------------------------------------------
32
SELECT COUNT(cname) AS numUsers
FROM users
WHERE cname = $cname and passwd = $passwd
#--------------------------------------------------------------------------
33
UPDATE users
SET passwd = $password
WHERE cname = $username
#--------------------------------------------------------------------------
34

UPDATE users   SET
    fname 	= $fname,
    lname	= $lname,
    address	= $address,
    cellphone		= $cellphone,
    cname = $cname,
    homephone            = $homephone,
    home_location =$home_location,
    passwd      = $passwd
WHERE
    mobileid = $mobileid
#--------------------------------------------------------------------------
35
WITH activeusers AS(
	SELECT 
		COUNT(DISTINCT mobile_id) AS numactiveusers
	FROM 
		loc 
	WHERE  
		extract(day from age(current_date,CAST(stored_at AS DATE))) < 29 AND 
		extract(year from age(current_date,CAST(stored_at AS DATE))) = 0 AND 
		extract(month from age(current_date,CAST(stored_at AS DATE))) =0
),
previousactiveusers AS(
SELECT 
		COUNT(DISTINCT mobile_id) AS previousnumactiveusers
	FROM 
		loc 
	WHERE  
		extract(day from age(current_date - integer '29',CAST(stored_at AS DATE))) < 29 AND 
		extract(day from age(current_date - integer '29',CAST(stored_at AS DATE))) > 0 AND 
		extract(year from age(current_date - integer '29',CAST(stored_at AS DATE))) = 0 AND 
		extract(month from age(current_date - integer '29',CAST(stored_at AS DATE))) =0
)
SELECT
	COUNT(DISTINCT mobile_id) AS numusers,
	numactiveusers,
	previousnumactiveusers
FROM 
	loc,
	activeusers,
	previousactiveusers
GROUP BY activeusers.numactiveusers, previousactiveusers.previousnumactiveusers
#--------------------------------------------------------------------------
36
WITH measuredheart AS(
	SELECT 
		COUNT(DISTINCT ID) AS measuredheartbeats, CAST(measured_at AS DATE) AS measuredate 
	FROM 
		loc AS lo 
	WHERE 
		lo.record_type = 'active' AND lo.mobile_id = $mobile_id 
	GROUP BY CAST(measured_at AS DATE)
), 
measuredattack AS(
	SELECT 
		COUNT(DISTINCT ID) AS measuredattacks, CAST(measured_at AS DATE) AS measuredate2 
	FROM 
		loc AS lo2 
	WHERE 
		(lo2.record_type = 'SEVERE_ATTACK' OR lo2.record_type = 'MEDIUM_ATTACK' OR lo2.record_type = 'MILD_ATTACK') AND lo2.mobile_id = $mobile_id 
	GROUP BY 
		CAST(measured_at AS DATE)
) 
SELECT 
	CAST(measured_at AS DATE) AS measureddate, COUNT(DISTINCT id) AS measureduploads,measuredheartbeats, measuredattacks 
FROM 
	loc 
FULL OUTER JOIN measuredheart 
ON measuredheart.measuredate = CAST(measured_at AS DATE) 
FULL OUTER JOIN measuredattack 
ON measuredattack.measuredate2 = CAST(measured_at AS DATE) 
WHERE 
	mobile_id = $mobile_id 
GROUP BY 
	CAST(measured_at AS DATE),measuredheartbeats,measuredattacks 
LIMIT 365
#--------------------------------------------------------------------------
37
WITH deviceVersion AS (
	SELECT 
		DISTINCT mobile_id, 
		MAX(id), 
		version 
	FROM 
		loc 
	WHERE
		record_type = 'active'
	GROUP BY 
		mobile_id, 
		version
)
SELECT 
	version, 
	COUNT(*) AS numberOfDevices
FROM 
	deviceVersion 
GROUP BY 
	version
#--------------------------------------------------------------------------
38
SELECT 
	version AS versiontype,
	SUM(battery_level) AS totalbattery, 
	COUNT(id) AS numentries 
FROM 
	loc
WHERE 
	record_type = 'active' 
GROUP BY 
	version
#--------------------------------------------------------------------------
39
--returns in_valid points along with 10 points before and after the invalid point if they exist.
WITH rows AS (
	SELECT 
		*,
		ROW_NUMBER() OVER (ORDER BY mobile_id, id DESC) AS rn 
	FROM 
		loc 
	WHERE 
		(record_type <> 'active' OR record_type IS NULL)
)
SELECT 
	* 
FROM rows loc1

WHERE 
	(loc1.rn,loc1.mobile_id)  IN ((SELECT loc2.rn, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-1, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-2, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-3, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-4, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-5, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-6, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-7, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-8, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-9, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn-10, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+1, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+2, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+3, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+4, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+5, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+6, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+7, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+8, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+9, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION (SELECT loc2.rn+10, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1))

#--------------------------------------------------------------------------
40
--returns in_valid points along with 10 points before and after the invalid point if they exist.
WITH rows AS (
	SELECT 
		*,
		ROW_NUMBER() OVER (ORDER BY mobile_id, id DESC) AS rn 
	FROM 
		loc 
	WHERE 
		(record_type <> 'active' OR record_type IS NULL)
)
SELECT 
	* 
FROM rows loc1

WHERE 
	(loc1.rn,loc1.mobile_id)  IN (
(SELECT loc2.rn, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION 
(SELECT loc2.rn-1, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1) UNION 
(SELECT loc2.rn+1, loc2.mobile_id FROM rows loc2 WHERE loc2.is_valid != 1))
